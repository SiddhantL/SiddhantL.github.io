---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import { render } from 'astro:content';

interface Props {
	entry: CollectionEntry<'work'>;
}

export async function getStaticPaths() {
	const work = await getCollection('work');
	return work.map((entry) => ({
		params: { slug: entry.id },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content } = await render(entry);
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
	<div class="stack gap-20">
		<div class="stack gap-15">
			<header>
				<div class="wrapper stack gap-2">
					<a class="back-link" href="/work/"><Icon icon="arrow-left" /> Work</a>
					<Hero title={entry.data.title} align="start">
						<div class="details">
							<div class="tags">
								{entry.data.tags.map((t) => <Pill>{t}</Pill>)}
							</div>
							<p class="description">{entry.data.description}</p>
						</div>
					</Hero>
				</div>
			</header>

			<main class="wrapper">
				<div class="stack gap-10 content">
					<!-- Gallery or Single Image -->
					{entry.data.gallery && entry.data.gallery.length > 1 ? (
<div class="embla">
  <div class="embla__viewport">
    <div class="embla__container">
      {entry.data.gallery.map((img) => (
        <div class="embla__slide">
          <img src={img} alt={entry.data.img_alt || ''} loading="lazy" />
        </div>
      ))}
    </div>
  </div>
  <button class="embla__button embla__button--prev">â€¹</button>
  <button class="embla__button embla__button--next">â€º</button>

  <div class="embla__dots"></div> <!-- âœ… dots outside viewport -->
</div>



) : (
  entry.data.img && <img src={entry.data.img} alt={entry.data.img_alt || ''} loading="lazy" />
)}



					<!-- Markdown Description -->
					<div class="content">
						<Content />
					</div>

					<!-- YouTube Videos -->
					{entry.data.video && (
						<div class="videos">
							{entry.data.video.map((url) => (
								<iframe
									src={url}
									width="100%"
									height="315"
									frameborder="0"
									allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
									allowfullscreen
									loading="lazy"
								></iframe>
							))}
						</div>
					)}
				</div>
			</main>
		</div>

		<ContactCTA />
	</div>
</BaseLayout>

<style>
.embla {
  position: relative;
  overflow: hidden;
  width: 100%;
  max-width: 800px;
  margin: 0 auto;
}

.embla__viewport {
  overflow: hidden;
  width: 100%;
}

.embla__container {
  display: flex;
  user-select: none;
  /* Prevent iOS momentum scrolling */
  -webkit-overflow-scrolling: touch;
  backface-visibility: hidden;
}

.embla__slide {
  position: relative;
  flex: 0 0 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  aspect-ratio: 15/9; /* âœ… Forces nice rectangular shape for all slides */
  background: var(--background-primary);
  padding: 0.5rem;
}

.embla__slide img {
  max-width: 100%;
  max-height: 100%;
  border-radius: 1rem;
  object-fit: contain;
  object-position: center;
  border: 1px solid var(--gray-800);
  box-shadow: var(--shadow-sm);
  background: var(--gradient-subtle);
  pointer-events: none;
  
}

/* ðŸš€ Buttons */
.embla__button {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(0, 0, 0, 0.5);
  color: white;
  border: none;
  font-size: 2rem;
  padding: 0.5rem;
  border-radius: 9999px;
  cursor: pointer;
  z-index: 10;
  transition: background 0.2s ease;
}
.embla__button:hover {
  background: rgba(0, 0, 0, 0.7);
}

.embla__button:focus {
  outline: none; /* Prevent blue outline focus */
}

.embla__button--prev {
  left: 1rem;
}

.embla__button--next {
  right: 1rem;
}

@media (max-width: 600px) {
  .embla__button {
    display: none; /* Hide buttons on mobile, swipe instead */
  }
}

header {
	padding-bottom: 2.5rem;
	border-bottom: 1px solid var(--gray-800);
}

.back-link {
	display: none;
}

.details {
	display: flex;
	flex-direction: column;
	padding: 0.5rem;
	gap: 1.5rem;
	justify-content: space-between;
	align-items: center;
}

.tags {
	display: flex;
	gap: 0.5rem;
}

.description {
	font-size: var(--text-lg);
	max-width: 54ch;
}

.content {
	max-width: 65ch;
	margin-inline: auto;
}

.content > :global(* + *) {
	margin-top: 1rem;
}

.content :global(h1),
.content :global(h2),
.content :global(h3),
.content :global(h4),
.content :global(h5) {
	margin: 1.5rem 0;
}

.content :global(img) {
	border-radius: 1.5rem;
	box-shadow: var(--shadow-sm);
	background: var(--gradient-subtle);
	border: 1px solid var(--gray-800);
}

/* ðŸ‘‡ Gallery Image Layout */
.gallery {
	display: flex;
	flex-wrap: wrap;
	gap: 1rem;
	justify-content: center;
}

.gallery img {
	width: 100%;
	max-width: 20rem;
	border-radius: 1rem;
	box-shadow: var(--shadow-sm);
}

/* ðŸ‘‡ YouTube Videos Layout */
.videos {
	display: flex;
	flex-direction: column;
	gap: 2rem;
	margin-top: 2rem;
}

iframe {
	border-radius: 1rem;
	box-shadow: var(--shadow-sm);
	background: var(--gradient-subtle);
}

.content :global(blockquote) {
	font-size: var(--text-lg);
	font-family: var(--font-brand);
	font-weight: 600;
	line-height: 1.1;
	padding-inline-start: 1.5rem;
	border-inline-start: 0.25rem solid var(--accent-dark);
	color: var(--gray-0);
}

.back-link,
.content :global(a) {
	text-decoration: 1px solid underline transparent;
	text-underline-offset: 0.25em;
	transition: text-decoration-color var(--theme-transition);
}

.back-link:hover,
.back-link:focus,
.content :global(a:hover),
.content :global(a:focus) {
	text-decoration-color: currentColor;
}

@media (min-width: 50em) {
	.back-link {
		display: block;
		align-self: flex-start;
	}

	.details {
		flex-direction: row;
		gap: 2.5rem;
	}

	.content :global(blockquote) {
		font-size: var(--text-2xl);
	}
}

.embla {
  position: relative;
  overflow: hidden;
  width: 100%;
  max-width: 800px;
  margin: 0 auto;
}

.embla__viewport {
  overflow: hidden;
  width: 100%;
}

.embla__container {
  display: flex;
  user-select: none;
}

.embla__slide {
  position: relative;
  min-width: 100%;
  padding: 10px;
}

.embla__slide img {
  width: 100%;
  border-radius: 1rem;
  box-shadow: var(--shadow-sm);
  background: var(--gradient-subtle);
}

.embla__prev,
.embla__next {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: var(--gray-999);
  color: var(--gray-0);
  border: none;
  font-size: 2rem;
  padding: 0.25em 0.5em;
  border-radius: 9999px;
  cursor: pointer;
  z-index: 5;
}

.embla__prev {
  left: -2rem;
}

.embla__next {
  right: -2rem;
}

/* Arrows basic */
.embla__button {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(0, 0, 0, 0.5);
  color: white;
  border: none;
  font-size: 2rem;
  padding: 0.5rem;
  border-radius: 9999px;
  cursor: pointer;
  z-index: 10;
  transition: background 0.2s ease;
}

.embla__button:hover {
  background: rgba(0, 0, 0, 0.7);
}

.embla__button--prev {
  left: 1rem;
}

.embla__button--next {
  right: 1rem;
}

/* Default: hide dots */
.embla__dots {
  display: none;
}

/* âœ… On mobile: show dots */
@media (max-width: 600px) {
  .embla__dots {
    display: flex;
    justify-content: center;
    margin-top: 1rem;
    gap: 0.5rem;
  }
}


</style>

<script type="module">
import EmblaCarousel from 'https://cdn.skypack.dev/embla-carousel@8.0.0';

document.addEventListener('DOMContentLoaded', () => {
  const emblaRoot = document.querySelector('.embla');
  const viewport = emblaRoot.querySelector('.embla__viewport');
  const prevButton = emblaRoot.querySelector('.embla__button--prev');
  const nextButton = emblaRoot.querySelector('.embla__button--next');
  const dotsContainer = emblaRoot.querySelector('.embla__dots');

  if (viewport && prevButton && nextButton && dotsContainer) {
    const embla = EmblaCarousel(viewport, { loop: true });

    prevButton.addEventListener('click', () => embla.scrollPrev());
    nextButton.addEventListener('click', () => embla.scrollNext());

    const dots = embla.scrollSnapList().map((_, index) => {
      const dot = document.createElement('button');
      dot.className = 'embla__dot';
      
      // âœ… Base dot styles set directly
      dot.style.width = '10px';
      dot.style.height = '10px';
      dot.style.borderRadius = '50%';
      dot.style.margin = '0 5px';
      dot.style.backgroundColor = 'var(--gray-600)'; // Inactive color
      dot.style.border = 'none';
      dot.style.cursor = 'pointer';
      dot.style.transition = 'background-color 0.3s ease, transform 0.3s ease';
      dot.style.padding = '0';
      dot.style.flexShrink = '0';

      dot.addEventListener('click', () => embla.scrollTo(index));
      dotsContainer.appendChild(dot);
      return dot;
    });

    const updateDots = () => {
      const selectedIndex = embla.selectedScrollSnap();
      dots.forEach((dot, index) => {
        if (index === selectedIndex) {
          dot.style.backgroundColor = 'var(--accent-regular)'; // Active dot color
        } else {
          dot.style.backgroundColor = 'var(--gray-600)'; // Inactive dot color
        }
      });
    };

    embla.on('select', updateDots);
    embla.on('init', updateDots);
  }
});
</script>
